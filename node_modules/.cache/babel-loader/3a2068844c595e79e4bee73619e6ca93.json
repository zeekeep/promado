{"ast":null,"code":"var _jsxFileName = \"/home/abhishekraj/Desktop/frontend/pomodoro-timer/src/components/Timer/Timer.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport Button from \"../Button/Button\";\nimport CurrentRound from \"../CurrentRound/CurrentRound\";\nimport SelectRound from \"../SelectRound/SelectRound\";\nimport { ReactComponent as SkipIcon } from \"../../assets/icons/SkipIcon.svg\";\nimport { ReactComponent as SoundOnIcon } from \"../../assets/icons/SoundOnIcon.svg\";\nimport { ReactComponent as SoundOffIcon } from \"../../assets/icons/SoundOffIcon.svg\";\nimport countdownSoundSource from \"../../assets/sound/countdownSound.wav\";\nimport styles from \"./Timer.module.css\";\nimport formatTime from \"../../utils/formatTime\";\nimport minutesToSeconds from \"../../utils/minutesToSeconds\";\nimport useInterval from \"../../hooks/useInterval\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Timer = _ref => {\n  _s();\n\n  let {\n    round,\n    setRound,\n    isTimerActive,\n    setIsTimerActive,\n    currentTime\n  } = _ref;\n  const [seconds, setSeconds] = useState(minutesToSeconds(25));\n  const [currentRound, setCurrentCount] = useState(1);\n  const [isSoundOn, setIsSoundOn] = useLocalStorage(\"isSoundOn\", true);\n  const [endTime, setEndTime] = useState();\n  const countdownSound = new Audio(countdownSoundSource);\n  useEffect(() => {\n    setSeconds(minutesToSeconds(currentTime));\n  }, [currentTime]);\n\n  const selectRound = round => {\n    const roundTimeInSeconds = minutesToSeconds(currentTime);\n    setRound(round);\n    setSeconds(roundTimeInSeconds);\n    setIsTimerActive(false);\n  };\n\n  const startTimer = () => {\n    setEndTime(Date.now() + seconds * 1000);\n    setIsTimerActive(true);\n  };\n\n  const pauseTimer = () => setIsTimerActive(false);\n\n  const toggleSound = () => setIsSoundOn(!isSoundOn);\n\n  const setNextRound = round => {\n    if (round === \"pomodoro\") {\n      const currentBreak = currentRound % 4 !== 0 ? \"shortBreak\" : \"longBreak\";\n      selectRound(currentBreak);\n    } else {\n      selectRound(\"pomodoro\");\n      setCurrentCount(currentRound + 1);\n    }\n  };\n\n  const skipRound = () => {\n    const isConfirm = window.confirm(\"Are you sure you want to finish the round early?\");\n    if (isConfirm) setNextRound(round);\n  };\n\n  const isPomodoro = round === \"pomodoro\";\n  const roundMessage = isPomodoro ? \"Stay focused!\" : \"Break time!\";\n  const formattedTime = formatTime(seconds);\n  useInterval(() => {\n    if (endTime > Date.now()) {\n      const remainingSeconds = Math.round((endTime - Date.now()) / 1000);\n      setSeconds(remainingSeconds);\n      document.title = `${formatTime(remainingSeconds)} - ${roundMessage}`;\n\n      if (remainingSeconds === 3 && isSoundOn) {\n        countdownSound.play();\n      }\n    } else {\n      setIsTimerActive(false);\n      setNextRound(round);\n    }\n  }, isTimerActive ? 1000 : null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(SelectRound, {\n      selectRound: selectRound,\n      activeRound: round\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.Timer,\n      children: formattedTime\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), isTimerActive && /*#__PURE__*/_jsxDEV(Button, {\n      className: styles.SoundButton,\n      onClick: toggleSound,\n      children: isSoundOn ? /*#__PURE__*/_jsxDEV(SoundOnIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 24\n      }, this) : /*#__PURE__*/_jsxDEV(SoundOffIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 42\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: styles.StartButton,\n      onClick: isTimerActive ? pauseTimer : startTimer,\n      children: isTimerActive ? \"Pause\" : \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), isTimerActive && /*#__PURE__*/_jsxDEV(Button, {\n      className: styles.SkipButton,\n      onClick: skipRound,\n      children: /*#__PURE__*/_jsxDEV(SkipIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.RoundMessage,\n      children: roundMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CurrentRound, {\n      currentRound: currentRound\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Timer, \"bbmiYNWLGUDfA7idJMKX3hx8/Jg=\", false, function () {\n  return [useLocalStorage, useInterval];\n});\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/abhishekraj/Desktop/frontend/pomodoro-timer/src/components/Timer/Timer.jsx"],"names":["useState","useEffect","Button","CurrentRound","SelectRound","ReactComponent","SkipIcon","SoundOnIcon","SoundOffIcon","countdownSoundSource","styles","formatTime","minutesToSeconds","useInterval","useLocalStorage","Timer","round","setRound","isTimerActive","setIsTimerActive","currentTime","seconds","setSeconds","currentRound","setCurrentCount","isSoundOn","setIsSoundOn","endTime","setEndTime","countdownSound","Audio","selectRound","roundTimeInSeconds","startTimer","Date","now","pauseTimer","toggleSound","setNextRound","currentBreak","skipRound","isConfirm","window","confirm","isPomodoro","roundMessage","formattedTime","remainingSeconds","Math","document","title","play","SoundButton","StartButton","SkipButton","RoundMessage"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport Button from \"../Button/Button\";\nimport CurrentRound from \"../CurrentRound/CurrentRound\";\nimport SelectRound from \"../SelectRound/SelectRound\";\n\nimport { ReactComponent as SkipIcon } from \"../../assets/icons/SkipIcon.svg\";\nimport { ReactComponent as SoundOnIcon } from \"../../assets/icons/SoundOnIcon.svg\";\nimport { ReactComponent as SoundOffIcon } from \"../../assets/icons/SoundOffIcon.svg\";\n\nimport countdownSoundSource from \"../../assets/sound/countdownSound.wav\";\n\nimport styles from \"./Timer.module.css\";\n\nimport formatTime from \"../../utils/formatTime\";\nimport minutesToSeconds from \"../../utils/minutesToSeconds\";\n\nimport useInterval from \"../../hooks/useInterval\";\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\n\nconst Timer = ({\n  round,\n  setRound,\n  isTimerActive,\n  setIsTimerActive,\n  currentTime,\n}) => {\n  const [seconds, setSeconds] = useState(minutesToSeconds(25));\n  const [currentRound, setCurrentCount] = useState(1);\n  const [isSoundOn, setIsSoundOn] = useLocalStorage(\"isSoundOn\", true);\n  const [endTime, setEndTime] = useState();\n  const countdownSound = new Audio(countdownSoundSource);\n\n  useEffect(() => {\n    setSeconds(minutesToSeconds(currentTime));\n  }, [currentTime]);\n\n  const selectRound = (round) => {\n    const roundTimeInSeconds = minutesToSeconds(currentTime);\n\n    setRound(round);\n    setSeconds(roundTimeInSeconds);\n    setIsTimerActive(false);\n  };\n\n  const startTimer = () => {\n    setEndTime(Date.now() + seconds * 1000);\n    setIsTimerActive(true);\n  };\n\n  const pauseTimer = () => setIsTimerActive(false);\n  const toggleSound = () => setIsSoundOn(!isSoundOn);\n\n  const setNextRound = (round) => {\n    if (round === \"pomodoro\") {\n      const currentBreak = currentRound % 4 !== 0 ? \"shortBreak\" : \"longBreak\";\n      selectRound(currentBreak);\n    } else {\n      selectRound(\"pomodoro\");\n      setCurrentCount(currentRound + 1);\n    }\n  };\n\n  const skipRound = () => {\n    const isConfirm = window.confirm(\n      \"Are you sure you want to finish the round early?\"\n    );\n\n    if (isConfirm) setNextRound(round);\n  };\n\n  const isPomodoro = round === \"pomodoro\";\n  const roundMessage = isPomodoro ? \"Stay focused!\" : \"Break time!\";\n  const formattedTime = formatTime(seconds);\n\n  useInterval(\n    () => {\n      if (endTime > Date.now()) {\n        const remainingSeconds = Math.round((endTime - Date.now()) / 1000);\n\n        setSeconds(remainingSeconds);\n\n        document.title = `${formatTime(remainingSeconds)} - ${roundMessage}`;\n        if (remainingSeconds === 3 && isSoundOn) {\n          countdownSound.play();\n        }\n      } else {\n        setIsTimerActive(false);\n        setNextRound(round);\n      }\n    },\n    isTimerActive ? 1000 : null\n  );\n\n  return (\n    <>\n      <SelectRound selectRound={selectRound} activeRound={round} />\n      <div className={styles.Timer}>{formattedTime}</div>\n      {isTimerActive && (\n        <Button className={styles.SoundButton} onClick={toggleSound}>\n          {isSoundOn ? <SoundOnIcon /> : <SoundOffIcon />}\n        </Button>\n      )}\n      <Button\n        className={styles.StartButton}\n        onClick={isTimerActive ? pauseTimer : startTimer}\n      >\n        {isTimerActive ? \"Pause\" : \"Start\"}\n      </Button>\n      {isTimerActive && (\n        <Button className={styles.SkipButton} onClick={skipRound}>\n          <SkipIcon />\n        </Button>\n      )}\n      <div className={styles.RoundMessage}>{roundMessage}</div>\n      <CurrentRound currentRound={currentRound} />\n    </>\n  );\n};\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}